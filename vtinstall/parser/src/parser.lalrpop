use std::str::FromStr;
use crate::script::statement::Statement as StatementType; 
use crate::script::Script as ScriptType;


grammar(name: &str);


pub Script: ScriptType = {
    <mut statements:(<Statement> Newline)*> <e:Statement?> => match e { 
        None => ScriptType::builder().name(String::from(name)).statements(statements).build(),
        Some(e) => {
            statements.push(e);
            ScriptType::builder().name(String::from(name)).statements(statements).build()
        }
    }
}

Statement : StatementType = Whitespace? <instruction: Instruction> Whitespace <args: Args> => StatementType::parse(<>);


Instruction = SpecialCharWord;

Args : String = {
    SpecialCharWord => String::from(<>),
    <a:Args> <b: Whitespace> <c:SpecialCharWord> => a + b + &c,
}


SpecialCharWord :String = {
    <a:Instruction> <b: Word> => a + b,
    <a:Instruction> <b: SpecialChar> => a + b,
    Word => String::from(<>),
    SpecialChar => String::from(<>),
}

match{
    r"\r?\n" => Newline,
    r"[\w\d]+" => Word,
    r"[^\w\d\t \r\n]" => SpecialChar,
    r"[\t ]+" => Whitespace,
}else{
    r"#[^\n\r]*" => { }, //skip comments
    _
}